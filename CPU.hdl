// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    Mux16( a = false , b = instruction , sel=instruction[15] , out[0]=JGT , out[1]=JEQ , out[2]=JLT , out[3]=DestM , out[3]=writeM , out[4]=DestD , out[5]=DestA , out[6]=No , out[7]=F , out[8]=Ny , out[9]=Zy , out[10]=Nx , out[11]=Zx , out[12]=AOrM, out[15]=ct);
    Or(a=zflag, b=nflag, out=LTEQ);
    Not(in=LTEQ, out=pflag);
    ALU(x=inputx , y=inputy , zx=Zx , nx=Nx , zy=Zy , ny=Ny , f=F , no=No , out=AluOutput , out=outM , zr=zflag , ng=nflag);
    Mux16(a=instruction, b=AluOutput, sel=ct, out=aMux);
    Mux16(a=OutA, b=inM, sel=AOrM, out=inputy);
    Not(in=ct, out=negC);
    Or(a=negC, b=DestA, out=loadA);
    ARegister(in=aMux, load=loadA, out=OutA,out[0..14]=addressM);
    DRegister(in=AluOutput, load=DestD, out=inputx);
    And(a=JEQ, b=zflag, out=j1);
    And(a=JGT, b=pflag, out=j2);
    And(a=JLT, b=nflag, out=j3);
    Or(a=j1, b=j2, out=j4);
    Or(a=j4, b=j3, out=jmp);
    PC(in=OutA, load=jmp, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}